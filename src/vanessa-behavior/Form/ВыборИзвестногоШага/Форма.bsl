
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЯзыкГенератораGherkin = "ru" Тогда
		Элементы.ПоказатьПеревод.Видимость = Ложь;
	КонецЕсли;	 
	
	ЗаполнитьДеревоИзвестныхШаговНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
		
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ДобавитьТипыШагов(Дерево,Тип)
	НайденныеСтрокиДерева = Дерево.Строки.НайтиСтроки(Новый Структура("ПолныйТипШага",Тип),Истина);
	Если НайденныеСтрокиДерева.Количество() = 0 Тогда
		ТекСтроки = Дерево.Строки;
		МассивТип = РазложитьСтрокуВМассивПодстрок(Тип,".");
		ПолныйТипШага = "";
		Для Каждого ПодТип Из МассивТип Цикл
			Если ПолныйТипШага = "" Тогда
				ПолныйТипШага = ПодТип;
			Иначе
				ПолныйТипШага = ПолныйТипШага + "." + ПодТип;
			КонецЕсли;	 
			
			НайденныеСтрокиДерева = ТекСтроки.НайтиСтроки(Новый Структура("ТипШага",ПодТип),Ложь);
			Если НайденныеСтрокиДерева.Количество() = 0 Тогда
				ТекСтрока               = ТекСтроки.Добавить();
				ТекСтрока.ТипШага       = ПодТип;
				ТекСтрока.ПолныйТипШага = ПолныйТипШага;
				
				ТекСтроки = ТекСтрока.Строки;
			Иначе	
				ТекСтроки = НайденныеСтрокиДерева[0].Строки;
			КонецЕсли;	 
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьШаги(Дерево,Тип,ПредставлениеТеста,ОписаниеШага,ИмяФайла)
	НайденныеСтрокиДерева = Дерево.Строки.НайтиСтроки(Новый Структура("ПолныйТипШага",Тип),Истина);
	Если НайденныеСтрокиДерева.Количество() = 0 Тогда
		ВызватьИсключение("Не найден тип шага <" + Тип + ">");
	КонецЕсли;
	
	СтрокаДерева = НайденныеСтрокиДерева[0];	
	СтрокаШага   = СтрокаДерева.Строки.Добавить();
	СтрокаШага.ПредставлениеТеста = ПредставлениеТеста;
	СтрокаШага.ОписаниеШага       = ОписаниеШага;
	СтрокаШага.ИмяФайла           = ИмяФайла;
	
КонецПроцедуры

Процедура ПроставитьРекурсивноСтрокуВПустойТип(Дерево,СлужебнаяСтрока,ЗаменятьПустойТип)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если ЗаменятьПустойТип Тогда
			Если СокрЛП(СтрокаДерева.ТипШага) = "" Тогда
				СтрокаДерева.ТипШага = СлужебнаяСтрока;
			КонецЕсли;	 
		Иначе	
			Если СтрокаДерева.ТипШага = СлужебнаяСтрока Тогда
				СтрокаДерева.ТипШага = "Другое";
			КонецЕсли;	 
		КонецЕсли;	 
		
		ПроставитьРекурсивноСтрокуВПустойТип(СтрокаДерева,СлужебнаяСтрока,ЗаменятьПустойТип);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура СделатьСортировкуДерева(Дерево)
	//СлужебнаяСтрока = "Другое";
	//ПроставитьРекурсивноСтрокуВПустойТип(Дерево,СлужебнаяСтрока,Истина);
	Дерево.Строки.Сортировать("ТипШага,ОписаниеШага",Истина);
	//ПроставитьРекурсивноСтрокуВПустойТип(Дерево,СлужебнаяСтрока,Ложь);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТаблицаИзвестныхStepDefinition.Загрузить(Параметры.ТаблицаИзвестныхStepDefinition.Выгрузить());
	
	ЯзыкГенератораGherkin = Параметры.ЯзыкГенератораGherkin;
	КаталогИнструментов   = Параметры.КаталогИнструментов;
	МакетШаблонПеревода   = Параметры.МакетШаблонПеревода;
	
	
	Для Каждого СтрокаТаблицаУжеСуществующихСценариев Из Параметры.ТаблицаУжеСуществующихСценариев Цикл
		СтрокаТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Добавить();
		
		СтрокаТаблицаИзвестныхStepDefinition.ИмяФайла           = СтрокаТаблицаУжеСуществующихСценариев.ИмяФайла;
		СтрокаТаблицаИзвестныхStepDefinition.ТипШага            = СтрокаТаблицаУжеСуществующихСценариев.ТипШага;
		СтрокаТаблицаИзвестныхStepDefinition.ПредставлениеТеста = СтрокаТаблицаУжеСуществующихСценариев.ПримерИспользования;
		СтрокаТаблицаИзвестныхStepDefinition.ОписаниеШага       = СтрокаТаблицаУжеСуществующихСценариев.ОписаниеШага;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоИзвестныхШаговНаСервере()

	Дерево = РеквизитФормыВЗначение("ДеревоШагов");
	
	Если Ложь Тогда
		Дерево = Новый ДеревоЗначений;
	КонецЕсли;
	Дерево.Строки.Очистить();
	
	ТабРезультат = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	//получить список шагов с учетом фильтра
	Если ЗначениеЗаполнено(ФильтрДереваШагов) Тогда
		Построитель = Новый ПостроительЗапроса;
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабРезультат);

		тОтбор = Построитель.Отбор.Добавить("ПредставлениеТеста");
		тОтбор.ВидСравнения = ВидСравнения.Содержит;
		тОтбор.Значение = ФильтрДереваШагов;
		тОтбор.Использование = Истина;
		
		Построитель.Выполнить();
		ТабРезультат = Построитель.Результат.Выгрузить();
	КонецЕсли;	
	
	Для Каждого СтрТаблицаИзвестныхStepDefinition Из ТабРезультат Цикл
		Тип = СокрЛП(СтрТаблицаИзвестныхStepDefinition.ТипШага);
		Если ПоказыватьСлужебныеШаги И Тип = "" Тогда
			Тип = "Служебные";
		ИначеЕсли Тип = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьТипыШагов(Дерево,Тип); //группы
	КонецЦикла;
	
	Для Каждого СтрТаблицаИзвестныхStepDefinition Из ТабРезультат Цикл
		Тип = СокрЛП(СтрТаблицаИзвестныхStepDefinition.ТипШага);
		Если ПоказыватьСлужебныеШаги И Тип = "" Тогда
			Тип = "Служебные";
		ИначеЕсли Тип = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Данные = СтрТаблицаИзвестныхStepDefinition;
		
		ДобавитьШаги(Дерево,Тип,Данные.ПредставлениеТеста,Данные.ОписаниеШага,Данные.ИмяФайла);
	КонецЦикла;	
	
	СделатьСортировкуДерева(Дерево);
	
	ЗначениеВРеквизитФормы(Дерево,"ДеревоШагов");

КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаговВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПредставлениеТеста) Тогда
		Возврат;
	КонецЕсли;	
	
	Оповестить("ВыборИзвестногоШага",Элемент.ТекущиеДанные.ПредставлениеТеста);
	Сообщить("Добавил шаг: " + Элемент.ТекущиеДанные.ПредставлениеТеста);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСлужебныеШагиПриИзменении(Элемент)
	ЗаполнитьДеревоИзвестныхШаговНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокуДерева(Строка)
	ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
	Элементы.ДеревоШагов.Развернуть(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСтрокуДерева(Строка)
	ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
	Элементы.ДеревоШагов.Свернуть(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		РазвернутьСтрокуДерева(Строка);
		РазвернутьСтрокиДерева(Строка.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСтрокиДерева(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		СвернутьСтрокуДерева(Строка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НайтиШагиПриИзменении(Элемент)
	ЗаполнитьДеревоИзвестныхШаговНаСервере();
	Если Не ЗначениеЗаполнено(ФильтрДереваШагов) Тогда
		Возврат;
	КонецЕсли;	 
	
	ДеревоФормыСтроки = ДеревоШагов.ПолучитьЭлементы();
	РазвернутьСтрокиДерева(ДеревоФормыСтроки);
КонецПроцедуры


&НаСервере
Функция СоздатьFeatureReader(КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла)
	ФайлvbFeatureReader = Новый Файл(КаталогИнструментов + "\vbFeatureReader.epf");
	ВременноеИмяФайла = Неопределено;
	Если Не ФайлvbFeatureReader.Существует() Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе	
		FeatureReader = ВнешниеОбработки.Создать(ФайлvbFeatureReader.ПолноеИмя, Ложь);
	КонецЕсли;	 
	
	Возврат FeatureReader;
КонецФункции	

&НаСервере
Функция УбратьЛишиниеСимволыИзТекста(Знач Стр)
	Стр = СтрЗаменить(Стр,Символы.Таб," ");
	Пока Найти(Стр,"  ") > 0 Цикл
		Стр = СтрЗаменить(Стр,"  "," ");
	КонецЦикла;	
	
	Возврат Стр;
КонецФункции	

&НаСервере
Процедура ДобавитьЗначенияВТаблицуДляПереодаРекурсивно(ТаблицаДляПереводаИзвестныхШагов,Дерево)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.ТипШага) Тогда
			СтрокаТаблицаДляПереводаИзвестныхШагов = ТаблицаДляПереводаИзвестныхШагов.Найти(СтрокаДерева.ТипШага,"ОригиналРусскийШаг");
			Если СтрокаТаблицаДляПереводаИзвестныхШагов = Неопределено Тогда
				СтрокаТаблицаДляПереводаИзвестныхШагов = ТаблицаДляПереводаИзвестныхШагов.Добавить();
				СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийШаг          = СтрокаДерева.ТипШага;
				СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийОписаниеШага = "Категория шагов";
			КонецЕсли;	 
		Иначе
			СтрокаТаблицаДляПереводаИзвестныхШагов = ТаблицаДляПереводаИзвестныхШагов.Найти(СтрокаДерева.ПредставлениеТеста,"ОригиналРусскийШаг");
			Если СтрокаТаблицаДляПереводаИзвестныхШагов = Неопределено Тогда
				СтрокаТаблицаДляПереводаИзвестныхШагов = ТаблицаДляПереводаИзвестныхШагов.Добавить();
				СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийШаг          = УбратьЛишиниеСимволыИзТекста(СтрокаДерева.ПредставлениеТеста);
				СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийОписаниеШага = СтрокаДерева.ОписаниеШага;
			КонецЕсли;	 
		КонецЕсли;	
		
		ДобавитьЗначенияВТаблицуДляПереодаРекурсивно(ТаблицаДляПереводаИзвестныхШагов,СтрокаДерева);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДляПеревода(ТаблицаДляПереводаИзвестныхШагов,Дерево)
	ДобавитьЗначенияВТаблицуДляПереодаРекурсивно(ТаблицаДляПереводаИзвестныхШагов,Дерево);
КонецПроцедуры

&НаСервере
Функция ПоказатьПереводТекстаGherkin(ДанныеПеревода)
	ДеревоСервер = РеквизитФормыВЗначение("ДеревоШагов");
	
	ТаблицаДляПереводаИзвестныхШагов = Новый ТаблицаЗначений;
	ТаблицаДляПереводаИзвестныхШагов.Колонки.Добавить("ОригиналРусскийШаг");
	ТаблицаДляПереводаИзвестныхШагов.Колонки.Добавить("ОригиналРусскийОписаниеШага");
	ТаблицаДляПереводаИзвестныхШагов.Колонки.Добавить("Перевод");
	
	
	ЗаполнитьТаблицуДляПеревода(ТаблицаДляПереводаИзвестныхШагов,ДеревоСервер);
	
	ДанныеПеревода.Вставить("ТаблицаДляПереводаИзвестныхШагов",ТаблицаДляПереводаИзвестныхШагов);
	ДанныеПеревода.Вставить("МакетШаблонПеревода",МакетШаблонПеревода);
	
	
	
	
	
	ДвДанныеvbFeatureReader = Неопределено;
	ВременноеИмяФайла = Неопределено;
	FeatureReader = СоздатьFeatureReader(КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла);
	
	FeatureReader.ПоказатьПереводТекстаGherkin(ДанныеПеревода);
	ДанныеПеревода.Вставить("ТаблицаПеревода",Неопределено);
	
	ДанныеПеревода.Вставить("ТаблицаДляПереводаИзвестныхШагов",Неопределено);
	
	ТабДок         = ДанныеПеревода.ТабДок;
	ДанныеПеревода = Неопределено;
	
	Возврат ТабДок;
КонецФункции	

&НаКлиенте
Процедура ПоказатьПеревод(Команда)
	
	ИмяФайлаПеревода = КаталогИнструментов + "\locales\Gherkin\" + ЯзыкГенератораGherkin + ".mxl"; 
	
	
	ДанныеПеревода = Новый Структура;
	ДанныеПеревода.Вставить("ИмяФайлаПеревода",ИмяФайлаПеревода);
	ДанныеПеревода.Вставить("ЯзыкПеревода",ЯзыкГенератораGherkin);
	
	Попытка
		ДанныеПеревода.Вставить("ДвоичныеДанныеФайлПеревода",Новый ДвоичныеДанные(ДанныеПеревода.ИмяФайлаПеревода));
	Исключение
		//значит файла нет
		Сообщить("Файл <" + ИмяФайлаПеревода + "> не найден.");
		ДанныеПеревода.Вставить("ДвоичныеДанныеФайлПеревода",Неопределено);
	КонецПопытки;
	
	ДанныеПеревода.Вставить("ФормированиеТаблицыДляДальнейшегоПеревода",Истина);
	
	ТабДок = ПоказатьПереводТекстаGherkin(ДанныеПеревода);
	ТабДок.Показать();
КонецПроцедуры


&НаКлиенте
Процедура НайтиШагиОчистка(Элемент, СтандартнаяОбработка)
КонецПроцедуры

